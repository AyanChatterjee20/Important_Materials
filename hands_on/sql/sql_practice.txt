You are given a table of users who have been blocked from Facebook, together with the date, duration, and the reason for the blocking. The duration is expressed as the number of days after blocking date and if this field is empty, this means that a user is blocked permanently. For each blocking reason, count how many users were blocked in December 2021. Include both the users who were blocked in December 2021 and those who were blocked before but remained blocked for at least a part of December 2021.

CREATE TABLE fb_blocked_users (
user_id int,
block_reason varchar(50),
block_date datetime,
block_duration float
);

INSERT INTO fb_blocked_users VALUES
(3642,'Fake Account','2021-12-03',15),
(2847,'Fake Account','2021-12-15',120),
(1239,'Fake Account','2021-11-19',11),
(3642,'Fake Account','2021-12-23',15),
(2134,'Fake Account','2021-11-03',null),
(1309,'Fake Account','2021-11-29',14),
(2049,'Spreading Fakenews','2022-01-12',null),
(1382,'Spreading Fakenews','2021-12-31',2),
(4295,'Spreading Fakenews','2020-12-14',null),
(3598,'Spreading Fakenews','2021-10-15',90),
(9285,'Inappropriate Posts','2021-12-01',null),
(4833,'Inappropriate Posts','2021-07-14',30),
(2348,'Inappropriate Posts','2020-11-25',15),
(1387,'Inappropriate Posts','2021-12-26',25);

select block_reason, count(user_id) from fb_blocked_users where month(block_date)=12 or month(date_add(block_date,interval block_duration day))=12 group by block_reason;

----------------------------------------------------------------------------------------------------------------------------------------------
Write a query to calculate the distribution of comments by the count of users that joined Meta/Facebook between 2018 and 2020, for the month of January 2020. The output should contain a count of comments and the corresponding number of users that made that number of comments in Jan-2020. For example, you'll be counting how many users made 1 comment, 2 comments, 3 comments, 4 comments, etc in Jan-2020. Your left column in the output will be the number of comments while your right column in the output will be the number of users. Sort the output from the least number of comments to highest. To add some complexity, there might be a bug where an user post is dated before the user join date. You'll want to remove these posts from the result.

create table fb_users (
id int,
name varchar(100),
joined_at datetime,
city_id int,
device int);

create table fb_comments (
user_id int,
body varchar(1000),
created_at datetime);

Insert into fb_users values
(4,'Ashley Sparks','2020-06-30',63,2185),
(8,'Zachary Tucker','2018-02-18',78,3900),
(9,'Caitlin Carpenter','2020-07-23',60,8592),
(18,'Wanda Ramirez','2018-09-28',55,7904),
(21,'Tonya Johnson','2019-12-02',62,4816),
(24,'Carlos Newman','2020-02-06',74,861),
(25,'Natasha Bradford','2020-02-12',60,9401),
(27,'Jessica Farrell','2019-03-24',67,7190),
(32,'Catherine Hurst','2018-08-22',51,5529),
(33,'Amanda Leon','2017-10-06',77,4597);

insert into fb_comments values 
(89,'Wrong set challenge guess college as position.','2020-01-16'),
(33,'Interest always door health military bag. Store smile factor player goal detail TV loss.','2019-12-31'),
(34,'Physical along born key leader various. Forward box soldier join.','2020-01-08'),
(46,'Kid must energy south behind hold. Research common long state get at issue. Weight technology live plant. His size approach loss.','2019-12-29'),
(25,'Or matter will turn only woman fact.','2019-12-21'),
(8,'Western east tax group character establish professor. Forward growth material. Before garden military product. Over southern manager. Along series civil theory force language clear.','2020-01-13');

with cmt_cte as (
select u.id, count(1) no_of_comment from fb_users u inner join fb_comments c on u.id=c.user_id 
where YEAR(u.joined_at) between 2018 and 2020 and date_format(cast(c.created_at as date), '%m-%Y') = '01-2020' and u.joined_at <= c.created_at
group by u.id
)

select no_of_comment, count(id) no_of_users from cmt_cte group by no_of_comment order by no_of_users

------------------------------------------------------------------------------------------------------------------------------------------------------------
An event is logged in the events table with a timestamp each time a new rider attempts a signup (with an event name 'attempted_su') or successfully signs up (with an event name of 'su_success'). For each city and date, determine the percentage of signups in the first 7 days of 2022 that completed a trip within 168 hours of the signup date. HINT: driver id column corresponds to rider id column

create table signup_events (
rider_id varchar(100),
city_id varchar(100),
event_name varchar(100),
timestamp datetime);

create table trip_details(
id varchar(100),
client_id varchar(100),
driver_id varchar(100),
city_id varchar(100),
client_rating float,
driver_rating float,
request_at datetime,
predicted_eta datetime,
actual_time_of_arrival datetime,
status varchar(100));

insert into signup_events values 
('r01','c001','su_success','2022-01-01 07:00:00'),
('r02','c002','su_success','2022-01-01 08:00:00'),
('r03','c002','su_success','2022-01-01 08:00:00'),
('r04','c001','attempted_su','2022-01-02 08:00:00'),
('r06','c001','attempted_su','2022-01-02 08:00:00'),
('r04','c001','su_success','2022-01-02 08:15:00'),
('r05','c001','su_success','2022-01-02 08:15:00');

insert into trip_details values
('t01','cl12','r01','c001',4.9,4.5,'2022-01-02 09:00:00','2022-01-02 09:10:00','2022-01-02 09:08:00','completed'),
('t02','cl10','r01','c001',4.9,4.8,'2022-01-02 11:00:00','2022-01-02 11:10:00','2022-01-02 11:13:00','completed'),
('t03','cl09','r04','c001',4.9,4.8,'2022-01-03 11:00:00','2022-01-03 11:10:00','2022-01-03 11:13:00','completed');

with signup_completed_cte as (
select s.city_id, cast(s.timestamp as date) date, count(1) signups, count(distinct case when t.request_at between (s.timestamp and date_add(s.timestamp, interval 168 HOUR)) and t.status='completed'
then t.driver_id end) completed_trips from signup_events s inner join trip_details t on s.rider_id=t.driver_id where (s.event_name='attempted_su' or s.event_name='su_success') and
cast(s.timestamp as date) between '2022-01-01' and '2022-01-07' group by s.city_id, cast(s.timestamp as date)
)

select city_id, date, concat(cast(completed_trips*100/signups as DECIMAL(15,2)),'%') from signup_completed_cte

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Find all the users who were active for 3 consecutive days or more

create table sf_events(
date datetime,
acount_id varchar(100),
user_id varchar(100));

insert into sf_events values
('2021-01-01','A1','U1'),
('2021-01-01','A1','U2'),
('2021-01-06','A1','U3'),
('2021-01-02','A1','U1'),
('2020-12-24','A1','U2'),
('2020-12-08','A1','U1'),
('2020-12-09','A1','U1'),
('2021-01-10','A2','U4'),
('2021-01-11','A2','U4'),
('2021-01-12','A2','U4'),
('2021-01-15','A2','U5'),
('2020-12-17','A2','U4'),
('2020-12-25','A3','U6'),
('2020-12-25','A3','U6'),
('2020-12-25','A3','U6'),
('2020-12-06','A3','U7'),
('2020-12-06','A3','U6'),
('2021-01-14','A3','U6'),
('2021-02-07','A1','U1'),
('2021-02-10','A1','U2'),
('2021-02-01','A2','U4'),
('2021-02-01','A2','U5'),
('2020-12-05','A1','U8');

with rn_cte as(
select user_id, date, ROW_NUMBER() over(PARTITION by user_id order by date) rn from sf_events
)

select user_id from rn_cte group by user_id, date_add(date, interval -rn day) having count(date_add(date, interval -rn day)) >=3

-----------------------------------------------------------------------------------------------------------------------------------
Find the number of times the words 'bull' and 'bear' occur in the contents. We are counting the number of times the words occur so words like 'bullish' should not be included in our count. Output the word 'bull' and 'bear' along with the corresponding number of occurrences.

create table google_file_store (
filename varchar(100),
contents varchar(1000));

insert into google_file_store values 
('draft1.txt','The stock exchange predicts a bull market which would make many investors happy.'),
('draft2.txt','The stock exchange predicts a bull market which would make many investors happy, but analysts warn of possibility of too much optimism and that in fact we are awaiting a bear market.'),
('final.txt','The stock exchange predicts a bull market which would make many investors happy, but analysts warn of possibility of too much optimism and that in fact we are awaiting a bear market. As always predicting the future market is an uncertain game and all investors should follow their instincts and best practices');

with cte as (
select REPLACE(VALUE,'.',' ') as word from google_file_store cross string_split(contents, ' ')
)

select word, count(*) from cte where word in ('bull', 'bear') group by word 

-----------------------------------------------------------------------------------------------------------------------------------------
Following a recent advertising campaign, you have been asked to compare the sales of consumable products across all brands. Compare the brands by finding the percentage of unique customers who purchased consumable products from each brand. Your output should contain the brand_name and percentage_of_customers rounded to the nearest whole number and ordered in descending order.

create table online_orders (
product_id int,
promotion_id int,
cost_in_dollars int,
customer_id int,
date datetime,
unit_solds int);

create table online_products (
product_id int,
product_class varchar(100),
brand_name varchar(100),
is_low_fat varchar(100),
is_recycle varchar(100),
product_category int,
product_family varchar(100));

insert into online_orders values 
(1,1,2,1,'2022-04-01',4),
(3,3,6,3,'2022-05-24',6),
(1,2,2,10,'2022-05-01',3),
(1,2,3,2,'2022-05-01',9),
(2,2,10,2,'2022-05-01',1);

insert into online_products values 
(1,'ACCESS ORIES','Fort West','N','N',3,'GADGET'),
(2,'DRINK','Fort West','N','Y',2,'CONSUMABLE'),
(3,'FOOD','Fort West','Y','N',1,'CONSUMABLE'),
(4,'DRINK','Golden','Y','Y',3,'CONSUMABLE'),
(5,'FOOD','Golden','Y','N',2,'CONSUMABLE'),
(6,'FOOD','Lucky Joe','N','Y',3,'CONSUMABLE'),
(7,'ELECTRONICS','Lucky Joe','N','Y',2,'GADGET');

select p.brand_name,count(distinct(o.customer_id))*100/count(*) perc from online_orders o inner join online_products p on o.product_id=p.product_id where p.product_family="CONSUMABLE" group by p.brand_name order by perc desc 

--------------------------------------------------------------------------------------------------------------------------------------------------------
Given the users sessions logs on a particular day, calculate how many hours each user was active that day. Note: The session starts when state=1 and ends when state=0

create table cust_tracking (
cust_id varchar(100),
state int,
timestamp datetime );

insert into cust_tracking values 
('c001',1,'2023-12-16 07:00:00'),
('c001',0,'2023-12-16 09:30:00'),
('c001',1,'2023-12-16 12:00:00'),
('c001',0,'2023-12-16 14:30:00'),
('c002',1,'2023-12-16 08:00:00'),
('c002',0,'2023-12-16 09:30:00'),
('c002',1,'2023-12-16 11:00:00'),
('c002',0,'2023-12-16 12:30:00'),
('c002',1,'2023-12-16 15:00:00'),
('c002',0,'2023-12-16 16:30:00'),
('c003',1,'2023-12-16 09:00:00'),
('c003',0,'2023-12-16 10:30:00'),
('c004',1,'2023-12-16 10:00:00'),
('c004',0,'2023-12-16 10:30:00'),
('c004',1,'2023-12-16 14:00:00'),
('c004',0,'2023-12-16 15:30:00'),
('c005',1,'2023-12-16 10:00:00'),
('c005',0,'2023-12-16 14:30:00'),
('c005',1,'2023-12-16 15:30:00'),
('c005',0,'2023-12-16 18:30:00');

with seperate_time_cte as (
select cust_id, case when state=1 then timestamp end as start_time, case when state=0 then timestamp end as end_time, 
rank() over(partition by cust_id order by timestamp) rnk from cust_tracking ),

start_end_cte as (
select cust_id, start_time, lead(end_time) over(partition by cust_id order by rnk) end_time from seperate_time_cte )

select cust_id, timediff(end_time,start_time) active_hours from start_end_cte where datediff(start_time,end_time) is not NULL 

-----------------------------------------------------------------------------------------------------------------------------------------------------
There are two tables one booking_table and users_table. We are requested to solve the following 4 questions.

create table booking_table (
Booking_id varchar(100),
Booking_date varchar(100),
User_id varchar(100),
Line_of_business varchar(100));

create table user_table (
User_id varchar(100),
Segment varchar(100));

insert into booking_table values 
('b1','2022-03-23','u1','Flight'),
('b2','2022-03-27','u2','Flight'),
('b3','2022-03-28','u1','Hotel'),
('b4','2022-03-31','u4','Flight'),
('b5','2022-04-02','u1','Hotel'),
('b6','2022-04-02','u2','Flight'),
('b7','2022-04-06','u5','Flight'),
('b8','2022-04-06','u6','Hotel'),
('b9','2022-04-06','u2','Flight'),
('b10','2022-04-10','u1','Flight'),
('b11','2022-04-12','u4','Flight'),
('b12','2022-04-16','u1','Flight'),
('b13','2022-04-19','u2','Flight');

insert into user_table values 
('u1','s1'),
('u2','s1'),
('u3','s1'),
('u4','s2'),
('u5','s2'),
('u6','s3'),
('u7','s3'),
('u8','s3'),
('u9','s3'),
('u10','s3');

1.Write a query to find the total number of users for each segment and total number of users who booked flight in April 2022.

select u.segment , count(u.user_id) total_user, count(case when Line_of_business= 'Flight' and date_format(Booking_date,'%m-%Y')='04-2022' then u.user_id end) total_flights_booked 
from user_table u left join booking_table b on u.user_id=b.user_id group by u.segment 

2.Write a query to identify users whose first booking was a hotel booking. 

select u.user_id from (select user_id, Line_of_business, DENSE_RANK() over(partition by user_id order by Booking_date) as rnk from booking_table) u 
where rnk=1 and u.Line_of_business='Hotel'

3.Write a query to calculate the days between first and last booking of each user.

select user_id, datediff(max(Booking_date),min(Booking_date)) as diff_day from booking_table group by user_id 

4.Write a query to count the number of flight and hotel bookings in each user segments for the year 2022

select u.segment, sum(case when b.Line_of_business='Hotel' then 1 end) "hotel_booking", sum(case when b.Line_of_business='Flight' then 1 end) "flight_booking" 
from user_table u inner join booking_table b on u.user_id=b.user_id where year(b.Booking_date)='2022' group by u.segment

------------------------------------------------------------------------------------------------------------------------------------------
Tiktok want to find out what were the top two most active user days during an advertising campaign they ran in the first week of August 2022 (between the 1st to the 7th). Identify the two days with the highest user activity during the advertising campaign. They have also specified that user activity must be measured in terms of unique users. Output the day, date, and number of users. FIELD TYPE

create table user_streaks (
user_id varchar(100),
date_visited datetime);

insert into user_streaks values 
('u001','2022-08-01'),
('u001','2022-08-01'),
('u004','2022-08-01'),
('u005','2022-08-01'),
('u005','2022-08-01'),
('u003','2022-08-02'),
('u004','2022-08-02'),
('u004','2022-08-02'),
('u004','2022-08-02');

select date_visited, count(distinct(user_id)) no_of_user from user_streaks group by date_visited order by no_of_user desc limit 2

---------------------------------------------------------------------------------------------------------------------------------------------
Find the latest inspection date for the most sanitary restaurant(s). Assume the most sanitary restaurant is the one with the highest number of points received in any inspection (not just the last one). Only businesses with 'restaurant' in the name should be considered in your analysis. Output the corresponding facility name, inspection score, latest inspection date, previous inspection date, and the difference between the latest and previous inspection dates. And order the records based on the latest inspection date in ascending order.

create table los_angeles_restaurant_health_inspectin (
serial_number varchar(100),
activity_date datetime,
facility_name varchar(100),
score int,
grade varchar(100),
service_code int,
service_description varchar(100),
employee_id varchar(100),
facility_address varchar(100),
facility_city varchar(100),
facility_id varchar(100),
facility_state varchar(100),
facility_zip varchar(100),
owner_id varchar(100),
owner_name varchar(100),
pe_description varchar(100),
program_element_pe int,
program_name varchar(100),
program_status varchar(100),
record_id varchar(100));

select r1.facility_name, r1.score, max(r1.activity_date) latest_inspection_date, max(r2.activity_date) previous_inspection_date, datediff(max(r1.activity_date),max(r2.activity_date)) difference 
from los_angeles_restaurant_health_inspectin r1 left join los_angeles_restaurant_health_inspectin r2 on r1.facility_name = r2.facility_name and r1.activity_date > r2.activity_date 
where r1.facility_name like '%resturant%' and r1.score in (select max(score) from los_angeles_restaurant_health_inspectin) 
group by r1.facility_name, r1.score order by latest_inspection_date

------------------------------------------------------------------------------------------------------------------------------------------------------
You’re given a dataset of uber rides with the traveling distance (‘distance_to_travel’) and cost (‘monetary_cost’) for each ride. For each date, find the difference between the distance per-dollar for that date and the average distance-per-dollar for that year-month. Distance-per-dollar is defined as the distance traveled divided by the cost of the ride. The output should include the year-month (YYYY-MM) and the absolute average difference in distance-per-dollar (Absolute value to be rounded to the 2nd decimal). You should also count both success and failed request_status as the distance and cost values are populated for all ride requests. Also, assume that all dates are unique in the dataset. Order your results by earliest request date first.

create table uber_request_logs (
request_id int,
request_date date,
request_status varchar(50),
distance_to_travel float,
monetary_cost float,
driver_to_client_distance float);

insert into uber_request_logs values 
(1,'2020-01-09','success',70.59,6.56,14.36),
(2,'2020-01-24','success',93.36,22.68,19.9),
(3,'2020-02-08','fail',51.24,11.39,21.32),
(4,'2020-02-23','success',61.58,8.04,44.26),
(5,'2020-03-09','success',25.04,7.19,1.74),
(6,'2020-03-24','fail',45.57,4.68,24.19),
(7,'2020-04-08','success',24.45,12.69,15.91),
(8,'2020-04-23','success',48.22,11.2,48.82),
(9,'2020-05-08','success',56.63,4.04,16.08);

with distance_cte as (
select date_format(request_date , '%m-%Y') date, request_status, distance_to_travel/monetary_cost distance_per_dollar, avg(distance_to_travel/monetary_cost) over(partition by date_format(request_date , '%m-%Y')) as avg_distance_per_dollar from uber_request_logs)

select date, abs(distance_per_dollar - avg_distance_per_dollar)  difference, sum(case when request_status='success' then 1 else 0 end) count_sum, sum(case when request_status='fail' then 1 else 0 end) from distance_cte group by date, abs(distance_per_dollar - avg_distance_per_dollar) order by date 



