Write a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places.
In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players. 


create table players (
player_id int,
device_id int, 
event_date date,
games_palyed int
);


insert into players values 
(1,2,'2016-03-01',5),
(1,2,'2016-03-02',6),
(2,3,'2017-06-25',1),
(3,1,'2016-03-02',0),
(3,4,'2018-07-03',5);

select player_id, lead() over(partition by player_id order by event_date) lead_day, lag() over(partition by player_id order by event_date) lag_day from players; 
-----------------------------------------------------------------------------------------------------------------------------------------------------
1. **Teams**
 - `team_id` (int, primary key): Unique identifier for each football team.
 - `team_name` (varchar): Name of the football team.

2. **Matches**
 - `match_id` (int, primary key): Unique identifier for each match.
 - `host_team` (int): ID of the host team (links to `team_id` in Teams).
 - `guest_team` (int): ID of the guest team (links to `team_id` in Teams).
 - `host_goals` (int): Number of goals scored by the host team.
 - `guest_goals` (int): Number of goals scored by the guest team.

📊 **The Challenge:**

- Each row in the Teams table represents a unique football team.
- Each row in the Matches table is a record of a finished match between two different teams.
- Teams are awarded points as follows:
 - 🏆 **Win:** 3 points (scoring more goals than the opponent).
 - 🤝 **Draw:** 1 point (same number of goals as the opponent).
 - 😔 **Lose:** 0 points (scoring fewer goals than the opponent).

📝 **Your Task:**

Write a SQL query to compute the scores of all teams after all matches. The query should return the `team_id`, `team_name`, and `num_points` for each team. Sort the results by `num_points` in descending order, and in case of a tie, order by `team_id` in ascending order.

👀 **Example Output:**

Teams Table:
| team_id | team_name  |
|---------|-------------|
| 10   | Leetcode FC |
| 20   | NewYork FC |
| 30   | Atlanta FC |
| 40   | Chicago FC |
| 50   | Toronto FC |

Matches Table:
| match_id | host_team | guest_team | host_goals | guest_goals |
|----------|-----------|------------|------------|-------------|
| 1    | 10    | 20     | 3     | 0      |
| 2    | 30    | 10     | 2     | 2      |
| 3    | 10    | 50     | 5     | 1      |
| 4    | 20    | 30     | 1     | 0      |
| 5    | 50    | 30     | 1     | 0      |

Result Table:
| team_id | team_name  | num_points |
|---------|-------------|------------|
| 10   | Leetcode FC | 7     |
| 20   | NewYork FC | 3     |
| 50   | Toronto FC | 3     |
| 30   | Atlanta FC | 1     |
| 40   | Chicago FC | 0     |

Ans:
with host as (
select team_id,team_name,host_points from (select team_id,team_name,sum(case when host_goals > guest_goals then 3 when host_goals = guest_goals then 1 when host_goals < guest_goals then 0 end) host_points from teams t inner join matches on team_id=host_team group by team_id,team_name) as d order by host_points desc , team_id
),

guest as (
select team_id,team_name,guest_points from (select team_id,team_name,sum(case when host_goals < guest_goals then 3 when host_goals = guest_goals then 1 when host_goals > guest_goals then 0 end) guest_points from teams t inner join matches on team_id=guest_team group by team_id,team_name) as d order by guest_points desc , team_id
)

select t.team_id,t.team_name,(host_points+guest_points) as num_points from teams t left join host h on h.team_id=t.team_id left join guest g on t.team_id=g.team_id


create table teams (
team_id int,
team_name varchar(40)
);

create table matches (
match_id int,
host_team int,
guest_team int,
host_goals int,
guest_goals int
);

insert into teams values 
(10,'Leetcode FC'),
(20,'NewYork ;C'), 
(30,'Atlanta ;C'), 
(40,'Chicago ;C'), 
(50,'Toronto FC'); 

insert into matches values 
(1,10,20,3,0),
(2,30,10,2,2),
(3,10,50,5,1),
(4,20,30,1,0),
(5,50,30,1,0);
-------------------------------------------------------------------------------------------------------------------------------------------------------
Table: `product` (Primary Key: product_id)
 | product_id | product_name |
 |------------|--------------|
 | 2     | rice     |

- Table: `product_price` (Key: product_id, effective_date)
 | product_id | price  | effective_date |
 |------------|---------|----------------|
 | 2     | 100/kg | 01/01/2023   |
 | 2     | 110/kg | 01/02/2023   |
 | 2     | 120/kg | 15/04/2023   |

- Table: `order` (Key: order_id)
 | order_id | product_id | date_sold | unit_sold |
 |----------|------------|------------|-----------|
 | 1    | 2     | 15/02/2023 | 5 kg   |

Write a SQL query to find out the product name and total value for `order_id = 1`.

select product_name, cast(substring(unit_sold,1,1) as unsigned)* cast(substring(price,1,3) as unsigned) as total_value from product p inner join product_price pp on 
p.product_id=pp.product_id inner join orders o on o.product_id=pp.product_id
where date_sold > effective_date and order_id=1 order by effective_date desc limit 1

create table product (
product_id int,
product_name varchar(10));

create table product_price (
product_id int,
price varchar(10),
effective_date datetime);

create table orders (
order_id int,
product_id int,
date_sold datetime,
unit_sold varchar(10));

insert into product values (2,'rice');

insert into orders values (1,2,'15/02/2023','5 kg');

insert into product_price values 
(2,'120/kg','2023-04-15'),
(2,'110/kg','2023-02-01'),
(2,'100/kg','2023-01-01');
----------------------------------------------------------------------------------------------------------------------------------------
Task: Given a dataset with columns PERSON, TYPE, and AGE, create an output where the oldest adult is paired with the youngest child, producing pairs of ADULT and CHILD while ensuring appropriate data matching.

💡 Check out the input and output in the table below!

Input:--->

| PERSON | TYPE | AGE |
| ------ | ------ | --- |
| A1 | ADULT | 54 |
| A2 | ADULT | 53 |
| A3 | ADULT | 52 |
| A4 | ADULT | 58 |
| A5 | ADULT | 54 |
| C1 | CHILD | 20 |
| C2 | CHILD | 19 |
| C3 | CHILD | 22 |
| C4 | CHILD | 15 |


Expected Output:--->

| ADULT | CHILD |
| ----- | ----- |
| A4 | C4 |
| A5 | C2 |
| A1 | C1 |
| A2 | C3 |
| A3 | NULL |


with cte_adult as (
select person, row_number() over(partition by type order by age desc) ar from adult_child where type='ADULT'
),

cte_child as (
select person, row_number() over(partition by type order by age) cr from adult_child where type='CHILD'
)

select a.person as ADULT,c.person as CHILD from cte_adult a left join cte_child c on a.ar=c.cr 

create table adult_child (
person varchar(10),
type varchar(10),
age int
);

insert into adult_child values
('A1','ADULT',54),
('A2','ADULT',53),
('A3','ADULT',52),
('A4','ADULT',58),
('A5','ADULT',54),
('C1','CHILD',20),
('C2','CHILD',19),
('C3','CHILD',22),
('C4','CHILD',15);
------------------------------------------------------------------------------------------------------------------------





